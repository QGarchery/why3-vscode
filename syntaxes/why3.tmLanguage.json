{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Why3",
  "patterns": [
    {
      "include": "#constructor"
    },
    {
      "include": "#keyword"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#comment"
    },
    {
      "include": "#import"
    },
    {
      "include": "#types"
    },
    {
      "include": "#definition"
    }
  ],
  "repository": {
    "keyword": {
      "patterns": [
        {
          "match": "\\b(abstract|any|as|break|by|continue|else|epsilon|exception|fun|ghost|if|in|lavel|meta|model|mutable|not|partial|private|raise|return|so|then|type|while|for|to|downto|do|done|try|match|with|begin|end|label|module|theory|scope)\\b",
          "name": "keyword.control"
        },
        {
          "match": "\\b(true|false)",
          "name": "constant.numeric"
        },
        {
          "match": "\\b\\d(\\d|_)*",
          "name": "constant.numeric"
        },
        {
          "match": "\\b0[xX]\\h(\\h|_)+",
          "name": "constant.numeric"
        },
        {
          "match": "\\b0[oO][0-7]([0-7]|_)+",
          "name": "constant.numeric"
        },
        {
          "match": "\\b0[bB][01]([01]|_)+",
          "name": "constant.numeric"
        },
        {
          "match": "\\b\\d+[eE][-+]?\\d+",
          "name": "constant.numeric"
        },
        {
          "match": "\\b(absurd|alias|assert|assume|check|diverges|ensures|invariant|pure|raises|reads|requires|returns|variant|writes)\\b",
          "name": "entity.other.attribute-name"
        },
        {
          "match": "(->|<->|/\\\\|\\\\/|&&|<-|\\+|-|\\*|/|\\=|>|<)",
          "name": "keyword.control"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "match": "\\\\.",
          "name": "constant.character.escape"
        }
      ]
    },
    "comment": {
      "name": "comment.block",
      "begin": "\\(\\*",
      "end": "\\*\\)",
      "patterns": [{ "include": "#comment" }]
    },
    "definition": {
      "match": "((?:\\s*(?:let|rec|function|predicate|ref|lemma|axiom|goal|inductive|coinductive|val|constant))+)\\s+([a-zA-Z0-9_]+)",
      "captures": {
        "1": {
          "name": "keyword.control"
        },
        "2": {
          "name": "variable.parameter"
        }
      }
    },
    "types": {
      "patterns": [
        {
          "begin": "(forall|exists)",
          "beginCaptures": {
            "1": {
              "name": "keyword.control"
            }
          },
          "end": "(\\.)",
          "endCaptures": {
            "1": {
              "name": "keyword.control"
            }
          },
          "patterns": [
            {
              "match": ":\\s*([^,\\.]+)",
              "captures": {
                "1": {
                  "name": "support.type"
                }
              }
            },
            {
              "match": ",",
              "name": "keyword.control"
            }
          ]
        },
        {
          "match": ":([^\\)\\(=]+)=",
          "captures": {
            "1": {
              "name": "support.type"
            }
          }
        },
        {
          "match": "([a-zA-Z0-9_]+)\\s*:\\s*([^\\)\\(=]+)[$;\\)]",
          "captures": {
            "1": {
              "name": "variable.parameter"
            },
            "2": {
              "name": "support.type"
            }
          }
        }
      ]
    },
    "import": {
      "begin": "\\b(use|clone)\\b",
      "beginCaptures": {
        "1": {
          "name": "keyword.control"
        }
      },
      "end": "\\b(\\w+\\.)+",
      "endCaptures": {
        "1": {
          "name": "support.type"
        }
      }
    },
    "constructor": {
      "match": "[A-Z][\\'a-zA-Z0-9]*",
      "name": "support.type"
    }
  },
  "scopeName": "source.mlw"
}
